package com.cabanaban.desklo.ui.desktop;

import com.cabanaban.desklo.presentation.TicketListItemViewModel;
import com.cabanaban.desklo.Services;
import com.cabanaban.desklo.ui.TicketListeItemViewModelObserver;
import java.util.HashMap;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;

/**
 *
 * @author henrique
 */
public class TicketManagerUIComponent extends javax.swing.JPanel implements TicketListeItemViewModelObserver {
    
    private String ticketID;
    private Services services;
    
    /**
     * Creates new form TicketManagerUIComponent
     */
    public TicketManagerUIComponent(Services services) {
        this.services = services;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iaffectedUserLabel = new javax.swing.JLabel();
        textArealScrollPane = new javax.swing.JScrollPane();
        problemTextArea = new javax.swing.JTextArea();
        supporterLabel = new javax.swing.JLabel();
        elapsedTimeLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        attendButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        iaffectedUserLabel.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        iaffectedUserLabel.setText("affectedUserLabel");

        problemTextArea.setEditable(false);
        problemTextArea.setBackground(new java.awt.Color(245, 246, 247));
        problemTextArea.setColumns(20);
        problemTextArea.setRows(5);
        problemTextArea.setText("problemTextArea");
        problemTextArea.setBorder(null);
        textArealScrollPane.setViewportView(problemTextArea);

        supporterLabel.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        supporterLabel.setText("supporterLabel");

        elapsedTimeLabel.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        elapsedTimeLabel.setText("elapsedTimeLabel");

        attendButton.setText("attendButton");

        transferButton.setText("transferButton");

        closeButton.setText("closeButton");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(attendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transferButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(attendButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transferButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iaffectedUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supporterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elapsedTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArealScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(iaffectedUserLabel)
                            .addComponent(elapsedTimeLabel)
                            .addComponent(supporterLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textArealScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attendButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel elapsedTimeLabel;
    private javax.swing.JLabel iaffectedUserLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea problemTextArea;
    private javax.swing.JLabel supporterLabel;
    private javax.swing.JScrollPane textArealScrollPane;
    private javax.swing.JButton transferButton;
    // End of variables declaration//GEN-END:variables
    public void update(TicketListItemViewModel ticketListItemViewModel) {
        iaffectedUserLabel.setText(ticketListItemViewModel.affectUserName);
        elapsedTimeLabel.setText(ticketListItemViewModel.elapsedTimeInHours);
        
        Color color = Color.decode(ticketListItemViewModel.elapsedTimeLabelColor);
        elapsedTimeLabel.setForeground(color);
        
        attendButton.setText(ticketListItemViewModel.attendActionText);
        attendButton.setEnabled(ticketListItemViewModel.attendActionEnabled);
        transferButton.setText(ticketListItemViewModel.transferActionText);
        transferButton.setEnabled(ticketListItemViewModel.transferActionEnabled);
        closeButton.setText(ticketListItemViewModel.closeActionText);
        closeButton.setEnabled(ticketListItemViewModel.closeActionEnabled);
        problemTextArea.setText(ticketListItemViewModel.problemDescription);
        supporterLabel.setText(ticketListItemViewModel.supporterName);
        ticketID = ticketListItemViewModel.ticketID;
        
        if (attendButton.getActionListeners().length == 0) {
            attendButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    HashMap<String,String> request = new HashMap<String,String>();
                    request.put("ticketID", ticketID);
                    services.getDispatcher().dispatch(ticketListItemViewModel.attendAction, request);
                }
            });
            
            transferButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    HashMap<String,String> request = new HashMap<String,String>();
                    request.put("ticketID", ticketID);
                    services.getDispatcher().dispatch(ticketListItemViewModel.transferAction, request);
                }
            });
                        
            closeButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    HashMap<String,String> request = new HashMap<String,String>();
                    request.put("ticketID", ticketID);
                    services.getDispatcher().dispatch(ticketListItemViewModel.closeAction, request);
                }
            });
        }

    }

}
